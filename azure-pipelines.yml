name: $(BuildID)

schedules:
- cron: "1 0 * * 1"
  displayName: 'Weekly build'
  always: true
  branches:
    include:
    - master

variables:
  SdkVersion: '5.0.100'

stages:
- stage: CI
  displayName: 'CI'
  jobs:
  - job: ci
    displayName: 'CI'

    strategy:
      maxParallel: 3
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macOS-latest'
        windows:
          imageName: 'windows-latest'
    pool:
      vmImage: $(imageName)

    variables:
      disable.coverage.autogenerate: 'true'
      EscapedComma: '%2c'
      TestResults: '$(Agent.TempDirectory)'
      CoverageResults: '$(Build.SourcesDirectory)/CoverageResults'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk v$(SdkVersion)'
      inputs:
        packageType: sdk
        version: '$(SdkVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: restore
        arguments: '--configuration Release'
        projects: './FileParserSolution.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: build
        arguments: '--configuration Release --no-restore /p:DeterministicBuild=true'
        projects: './FileParserSolution.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: test
        arguments: --configuration Release --no-build --collect:"XPlat Code Coverage"
        nobuild: true
        projects: '**/FileParser.Test.csproj'
        publishTestResults: true

    - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
      displayName: 'Generate tests report'
      condition: and(succeeded(), eq(variables['imageName'], 'ubuntu-latest'))
      inputs:
        reports: '$(Build.SourcesDirectory)/**/*.cobertura.xml'
        targetdir: '$(CoverageResults)'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
        assemblyfilters: '-xunit*'
        classfilters: '+*;-*Exception'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      condition: and(succeeded(), eq(variables['imageName'], 'ubuntu-latest'))
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(CoverageResults)/Cobertura.xml'
        reportDirectory: '$(CoverageResults)'
        pathToSources: '$(Build.SourcesDirectory)'

    - task: DotNetCoreCLI@2
      displayName: 'Generate NuGet package'
      condition: and(succeeded(), eq(variables['imageName'], 'ubuntu-latest'))
      inputs:
        command: 'pack'
        arguments: '--configuration Release'
        configuration: 'Release'
        packagesToPack: '**/FileParser.csproj'
        nobuild: true
        packDirectory: '$(Build.SourcesDirectory)/FileParser/Artifacts'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifact with NuGet package and its symbols'
      condition: and(succeeded(), eq(variables['imageName'], 'ubuntu-latest'))
      inputs:
        pathtoPublish: '$(Build.SourcesDirectory)/FileParser/Artifacts/'
        artifactName: 'FileParser'

